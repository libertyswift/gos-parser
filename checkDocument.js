import fs from 'fs/promises';
import path from 'path';
import mammoth from 'mammoth';
import { convertDocToDocx } from './convertDocToDocx.js'; // –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏–∑ —Ñ–∞–π–ª–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤—ã—à–µ

export async function checkDocument(filePath, numberRegex) {
  let fileToCheck = filePath;
  
  try {
    const ext = path.extname(filePath).toLowerCase();
    
    // –ï—Å–ª–∏ .doc ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ .docx
    if (ext === '.doc') {
      const converted = await convertDocToDocx(filePath);
      if (!converted) return false;
      fileToCheck = converted;
    }
    
    if (path.extname(fileToCheck).toLowerCase() !== '.docx') {
      console.warn(`‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${ext}`);
      return false;
    }
    
    const { value: text } = await mammoth.extractRawText({ path: fileToCheck });
    return numberRegex.test(text);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${fileToCheck}:`, error.message);
    return false;
    
  } finally {
    try {
      await fs.unlink(filePath);
      if (fileToCheck !== filePath) {
        await fs.unlink(fileToCheck);
      }
      console.log(`üßπ –£–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.`);
    } catch (err) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:`, err.message);
    }
  }
}
